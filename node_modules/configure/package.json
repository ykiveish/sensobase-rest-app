{
  "name": "configure",
  "main": "./main.js",
  "description": "A simple multiple-configuration management module.",
  "version": "0.0.1",
  "author": {
    "name": "Randolpho St. John"
  },
  "bugs": {
    "url": "https://github.com/randolpho/node-configure/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/randolpho/node-configure.git"
  },
  "config": {
    "notFound": "throw",
    "defaultConfigFile": "config.json",
    "commandLineSwitchName": "config"
  },
  "dependencies": {
    "optimist": ">=0.3.4"
  },
  "directories": {
    "lib": "."
  },
  "keywords": [
    "config",
    "configure",
    "configuration",
    "options",
    "settings"
  ],
  "engine": {
    "node": ">=0.6.11"
  },
  "scripts": {
    "install": "node install.js",
    "start": "node install.js",
    "test": "node ./test/testCoordinator.js"
  },
  "readme": "# _node-configure_\r\n\r\nThere are several configuration modules available for node.js. Each have their strengths and weaknesses, but\r\nno one project can be considered the optimal configuration option for all use cases. Some applications have\r\nneed of complex configuration that can be fetched from a central server. Others just want a simple JSON object\r\nloaded when the app starts.\r\n\r\n_node-configure_ seeks to solve the problem of a single application that is being developed by a group of\r\ndevelopers who need the ability to have a different application configuration for each developer and deployment environment,\r\nbut do not wish to utilize a complex configuration module.\r\n\r\nUsing _node-configure_, each developer can have a separate configuration file checked in to source control without\r\nbeing forced to worry about overwrites from another developer.\r\n\r\n#Overview\r\n\r\n_node-configure_ is designed to provide a global config that can be obtained from any node application file without\r\nforcing the main app file to load and pass around configuration setting objects. With _node-configure_, any file or\r\nmodule that requires the _node-configure_ module will receive the same configuration object, which is the parsed\r\nresult of the JSON configuration file.\r\n\r\nWith _node-configure_, it is the responsibility of modules that wish to obtain configuration settings to know\r\ntheir appropriate configuration fields and to provide defaults as necessary.\r\n\r\n## Example\r\nThe following is an example of how one might use the _node-configure_ module.\r\n\r\nThe `myConfig.json` file:\r\n\r\n```json\r\n{\r\n    \"serverPort\" : 3000,\r\n    \"couchDb\" : {\r\n        \"host\" : \"localhost\",\r\n        \"port\" : 5984,\r\n    }\r\n}\r\n```\r\n\r\nThe `main.js` file:\r\n\r\n```javascript\r\nvar config = require(\"configure\");\r\nvar port = 2000; // default port\r\nif(config.serverPort) {\r\n    port = config.serverPort;\r\n}\r\n// elsewhere...\r\nserver.listen(port, requestHandler);\r\n```\r\n\r\nThe `database.js` file:\r\n\r\n```javascript\r\nvar config = require(\"configure\");\r\nvar request = { \"host\":\"my.couchdb.com\", \"port\":5984 };\r\nif(config.couchDb) {\r\n    if(config.couchDb.host) {\r\n        request.host = config.couchDb.host;\r\n    }\r\n    if(config.couchDb.port) {\r\n        request.port = config.couchDb.port;\r\n    }\r\n}\r\n// later...\r\nrequest.path = \"/mydata\";\r\nhttp.get(request, responseHandler);\r\n```\r\n\r\nThe node start script:\r\n\r\n    node main.js --config myConfig.json\r\n\r\n#The Config File\r\n\r\nAt present _node-configure_ only supports JSON configuration files.\r\n\r\n#Default Behavior\r\n\r\nThe first time the _node-configure_ module is required by an application, it will attempt to load the file specified\r\nby the `--config` switch relative to the current working directory as obtained via `process.cwd()`. If\r\n_node-configure_ fails to find or load the file, it will throw an exception.\r\n\r\nIf the `--config` switch is not included as a command line parameter, _node-configure_ will attempt to load the file\r\n\"config.json\" in the current working directory. If that file is not found, _node-configure_ will throw an exception.\r\n\r\n#Changing Default Behavior\r\n\r\n_node-configure_ makes use of npm's\r\n[package-level configuration system](http://npmjs.org/doc/config.html#Per-Package-Config-Settings). If you wish to\r\nchange the default behavior of _node-configure_ you may do so through this system. After changing a package\r\nconfiguration option via `npm config set`, you must restart the _node-configure_ package to use the new settings.\r\nFor example:\r\n\r\n    npm config set configure:notFound throw\r\n\r\n    npm restart configure\r\n\r\n\r\n_node-configure_ supports the following npm configuration keys:\r\n\r\n* **notFound**: specifies what _node-configure_ should do when it fails to load a configuration file. Set this value\r\nto \"throw\" to cause _node-configure_ to throw an exception on a failed load. Any other value will cause _node-configure_\r\nto return null when it fails to load a configuration file.\r\n* **defaultConfigFile**: specifies the file _node-configure_ should attempt to load if no file is specified via\r\ncommand line.\r\n* **commandLineSwitchName**: specifies the command line switch _node-configure_ should look for to determine which\r\nconfiguration file to load. Change this value if you or some other module already use `--config`\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "configure@0.0.1",
  "_from": "configure@"
}
